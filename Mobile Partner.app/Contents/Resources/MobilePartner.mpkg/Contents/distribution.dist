<?xml version="1.0" encoding="utf-8"?>
<installer-script minSpecVersion="1.000000" authoringTool="com.apple.PackageMaker" authoringToolVersion="3.0.3" authoringToolBuild="174">
    <title>Mobile Partner</title>
    <license file="License.rtf"></license>
    <options customize="never" allow-external-scripts="no" rootVolumeOnly="false"/>
    <volume-check script="pm_volume_check();"/>
    <script>
/* js:pkmk:start */
function installationCheckRAM() {
	return  checkMemsize() ;
}
/* js:pkmk:end */


/* js:pkmk:start */
function checkMemsize() {
	var result = false;
	try {
		result = system.sysctl('hw.memsize') >= '134217728';
	} catch (e) {}
	
	if(!result) {
		my.result.type = 'Warn';
		my.result.title = 'Memory Warning';
		my.result.message = 'You have less than 128 MB of RAM.';
	}
	return result;
}
/* js:pkmk:end */


/* ******* DO NOT EDIT ANYTHING BELOW THIS LINE ******* */
/* THE TEXT BELOW IS THE DEFINITION FOR THE REQUIREMENTS EDITOR */

/*
 %%%Requirements Editor%%%
 {
	 clauses = (
				{
					anyOrAll = 2; 
					connector = ""; 
					msg = "You have less than 128 MB of RAM."; 
					msgTitle = "Memory Warning"; 
					rules = (
							 {
								 argumentField = "hw.memsize"; 
								 argumentStringField = ""; 
								 booleanType = true; 
								 choiceProperty = enabled; 
								 comboType = ""; 
								 comparator = ">="; 
								 mainChoice = "Result of Sysctl"; 
								 numberType = ""; 
								 pathField = ""; 
								 pathKeyKeyField = ""; 
								 pathKeyPathField = ""; 
								 specificChoice = choice0; 
								 stringType = 134217728; 
							 }
							 ); 
					title = "Check memsize"; 
					type = 2; 
				}
				); 
	 functionName = installationCheckRAM; 
 }
 %%%Requirements Editor%%%
 */



/* js:pkmk:start */
function volumeCheckTiger() {
	 return  checkSystemversion() ;
}
/* js:pkmk:end */


/* js:pkmk:start */
function checkSystemversion() {
	var result = false;
	try {
		result = my.target.systemVersion.ProductVersion >= '10.5';
	} catch (e) {}

	if(!result) {
		my.result.type = 'Fatal';
		my.result.title = '';
		my.result.message = '';
	}
	return result;
}
/* js:pkmk:end */






/* ******* DO NOT EDIT ANYTHING BELOW THIS LINE ******* */
/* THE TEXT BELOW IS THE DEFINITION FOR THE REQUIREMENTS EDITOR */

/*
 %%%Requirements Editor%%%
 {
	 clauses = (
				{
					anyOrAll = 2; 
					connector = ""; 
					msg = ""; 
					msgTitle = ""; 
					rules = (
							 {
								 argumentField = ""; 
								 argumentStringField = ""; 
								 booleanType = true; 
								 choiceProperty = enabled; 
								 comboType = ""; 
								 comparator = ">="; 
								 mainChoice = "Target OS Version (e.g. 10.x.x)"; 
								 numberType = ""; 
								 pathField = ""; 
								 pathKeyKeyField = ""; 
								 pathKeyPathField = ""; 
								 specificChoice = choice0; 
								 stringType = "10.5"; 
							 }
							 ); 
					title = "Check systemVersion"; 
					type = 3; 
				}
				); 
	 functionName = volumeCheckTiger; 
 }
 %%%Requirements Editor%%%
 */

/* ******* DO NOT EDIT ANYTHING BELOW THIS LINE ******* */
/* THE TEXT BELOW IS THE DEFINITION FOR THE REQUIREMENTS EDITOR */

/*
%%%Requirements Editor%%%
{
    clauses = (
        {
            anyOrAll = 2; 
            connector = ""; 
            msg = ""; 
            msgTitle = ""; 
            rules = (
                {
                    argumentField = ""; 
                    argumentStringField = ""; 
                    booleanType = true; 
                    choiceProperty = enabled; 
                    comboType = ""; 
                    comparator = ">="; 
                    mainChoice = "Target OS Version (e.g. 10.x.x)"; 
                    numberType = ""; 
                    pathField = ""; 
                    pathKeyKeyField = ""; 
                    pathKeyPathField = ""; 
                    stringType = "10.5"; 
                }
            ); 
            title = "Check systemVersion"; 
            type = 3; 
        }
    ); 
    functionName = volumeCheckTiger; 
}
%%%Requirements Editor%%%
*/



/* js:pkmk:start */
function choiceIsADowngrade() {
	return  checkChoiceUpgradeAction() ;
}
/* js:pkmk:end */


/* js:pkmk:start */
function checkChoiceUpgradeAction() {
	var result = false;
	try {
		result = my.choice.packageUpgradeAction == 'downgrade' || my.choice.packageUpgradeAction == 'mixed';
	} catch (e) {}
	
	return result;
}
/* js:pkmk:end */


/* ******* DO NOT EDIT ANYTHING BELOW THIS LINE ******* */
/* THE TEXT BELOW IS THE DEFINITION FOR THE REQUIREMENTS EDITOR */

/*
 %%%Requirements Editor%%%
 {
	 clauses = (
				{
					anyOrAll = 1; 
					connector = ""; 
					msg = ""; 
					msgTitle = ""; 
					rules = (
							 {
								 argumentField = ""; 
								 argumentStringField = ""; 
								 booleanType = true; 
								 choiceProperty = packageUpgradeAction; 
								 comboType = downgrade; 
								 comparator = "=="; 
								 mainChoice = "Current Choice"; 
								 numberType = ""; 
								 pathField = ""; 
								 pathKeyKeyField = ""; 
								 pathKeyPathField = ""; 
								 specificChoice = choice0; 
								 stringType = ""; 
							 }, 
							 {
								 argumentField = ""; 
								 argumentStringField = ""; 
								 booleanType = true; 
								 choiceProperty = packageUpgradeAction; 
								 comboType = mixed; 
								 comparator = "=="; 
								 mainChoice = "Current Choice"; 
								 numberType = ""; 
								 pathField = ""; 
								 pathKeyKeyField = ""; 
								 pathKeyPathField = ""; 
								 specificChoice = choice0; 
								 stringType = ""; 
							 }
							 ); 
					title = "Check Choice Upgrade Action"; 
					type = 0; 
				}
				); 
	 functionName = choiceIsADowngrade; 
 }
 %%%Requirements Editor%%%
 */



/* js:pkmk:start */
function CheckMountPoint() {
	 return  checkrootvolume() ;
}
/* js:pkmk:end */


/* js:pkmk:start */
function checkrootvolume() {
	var result = false;
	try {
		result = my.target.mountpoint == '/';
	} catch (e) {}

	if(!result) {
		my.result.type = 'Fatal';
		my.result.title = '';
		my.result.message = '';
	}
	return result;
}
/* js:pkmk:end */


/* ******* DO NOT EDIT ANYTHING BELOW THIS LINE ******* */
/* THE TEXT BELOW IS THE DEFINITION FOR THE REQUIREMENTS EDITOR */

/*
%%%Requirements Editor%%%
{
    clauses = (
        {
            anyOrAll = 2; 
            connector = ""; 
            msg = ""; 
            msgTitle = ""; 
            rules = (
                {
                    argumentField = ""; 
                    argumentStringField = ""; 
                    booleanType = true; 
                    choiceProperty = enabled; 
                    comboType = ""; 
                    comparator = "=="; 
                    mainChoice = "Target Mountpoint"; 
                    numberType = ""; 
                    pathField = ""; 
                    pathKeyKeyField = ""; 
                    pathKeyPathField = ""; 
                    specificChoice = MobileConnectDriver; 
                    stringType = "/"; 
                }
            ); 
            title = CheckRootVolume; 
            type = 3; 
        }
    ); 
    functionName = CheckMountPoint; 
}
%%%Requirements Editor%%%
*/


function pm_volume_check() {
  if(!(CheckMountPoint() == true)) {
    my.result.title = 'Failure';
    my.result.message = 'Installation cannot proceed, as not all requirements were met.';
    my.result.type = 'Fatal';
    return false;
  }
  return true;
}
</script>
    <choices-outline>
        <line choice="mobileconnectdriver"/>
        <line choice="comhuaweimobilepartner"/>
	<line choice="HWNetMgr"></line>
	<line choice="HWPortDetect"/>
    </choices-outline>
    <choice id="mobileconnectdriver" title="MobileConnectDriver" tooltip="" description="The driver of Management program">
        <pkg-ref id="com.bellardo.driver.HuaweiDataCardDriver"/>
    </choice>
    <choice id="comhuaweimobilepartner" title="Mobile Partner" tooltip="" description="The Management program Applications">
        <pkg-ref id="com.huawei.mobilePartner"/>
    </choice>
	<choice id="HWNetMgr" title="HWNetMgr" description="This package server for  Management program" start_selected="true" start_enabled="true" start_visible="true">
        <pkg-ref id="com.huawei.HWNetMgr"></pkg-ref>
    </choice>
     <choice id="HWPortDetect" title="HWPortDetect">
        <pkg-ref id="com.huawei.mobilePartner.hwportdetect.pkg"/>
    </choice>
    <pkg-ref id="com.bellardo.driver.HuaweiDataCardDriver" installKBytes="37524" version="2.5.0.2.5" auth="Root">file:./Contents/Packages/MobileConnectDriver.pkg</pkg-ref>
    <pkg-ref id="com.huawei.mobilePartner" installKBytes="16660" version="2.1.9.2.1" auth="Root">file:./Contents/Packages/Mobile%20Partner.pkg</pkg-ref>
    <pkg-ref id="com.huawei.HWNetMgr" version="1.0.0.1.0" installKBytes="220" auth="Root" onConclusion="None">file:./Contents/Packages/HWNetMgr.pkg</pkg-ref>
    <pkg-ref id="com.huawei.mobilePartner.hwportdetect.pkg" installKBytes="72" version="" auth="Root" onConclusion="None">file:./Contents/Packages/HWPortDetect.pkg</pkg-ref>
</installer-script>
